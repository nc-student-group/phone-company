#############################################################################
############################## Address entity ###############################
#############################################################################
query.address.save=INSERT INTO address(region_id, locality, street, house_number, apartment_number) VALUES (?, ?, ?, ?, ?) RETURNING id;
query.address.update=UPDATE address SET region_id = ?, locality = ?, street = ?, house_number = ?, apartment_number = ? WHERE id = ?;
query.address.getById=SELECT id, region_id, locality, street, house_number, apartment_number FROM address WHERE id = ?;
query.address.getAll=SELECT id, region_id, locality, street, house_number, apartment_number FROM address;
#############################################################################
############################## Complaint entity #############################
#############################################################################
query.complaint.save=INSERT INTO complaint(status, date, text, type, user_id, subject, responsible_pmg, comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?) RETURNING id;
query.complaint.update=UPDATE complaint SET status = ?, date = ?, text = ?, type = ?, user_id = ?, subject = ?, responsible_pmg = ?, comment = ? WHERE id = ?;
query.complaint.getById=SELECT id, status, date, text, type, user_id, subject, responsible_pmg, comment FROM complaint WHERE id = ?;
query.complaint.getAll=SELECT id, status, date, text, type, user_id, subject, responsible_pmg, comment FROM complaint
query.complaint.getCount=SELECT count(*) FROM complaint
query.complaint.getAllJoinedUser=\
  SELECT complaint.id, complaint.status, date, text, type, user_id, subject, responsible_pmg, comment \
  FROM complaint \
  INNER JOIN dbuser \
  ON complaint.user_id=dbuser.id
query.complaint.for.the.last.month.by.type=\
  SELECT count(*) AS "No. of complaints" \
  FROM "complaint" \
  WHERE date > now() - interval '1 month' \
  AND type = ? \
  GROUP BY date_trunc('week', date) \
  ORDER BY date_trunc('week', date);
query.complaint.by.region.id=\
  SELECT c.id, c.status, date, text, type, user_id, subject, responsible_pmg, comment, a.region_id \
  FROM "complaint" c \
  INNER JOIN "dbuser" d \
  ON c.user_id = d.id \
  INNER JOIN "address" a \
  ON d.address_id = a.id \
  WHERE a.region_id = ?;
query.complaint.by.region.id.and.time.period=\
  SELECT COUNT(complaint.id) AS complaint_count, complaint.status, type, date \
  FROM complaint INNER JOIN dbuser \
  ON dbuser.id = complaint.user_id \
  INNER JOIN address ON dbuser.address_id = address.id \
  WHERE address.region_id = ? AND complaint.date BETWEEN ? AND ? \
  GROUP BY complaint.status, complaint.date, complaint.type;
#############################################################################
############################## Corporate entity #############################
#############################################################################
query.corporate.save=INSERT INTO corporate(corporate_name) VALUES (?) RETURNING id;
query.corporate.update=UPDATE corporate SET corporate_name = ? WHERE id = ?;
query.corporate.getById=SELECT id, corporate_name FROM corporate WHERE id = ?;
query.corporate.getAll=SELECT id, corporate_name FROM corporate
query.corporate.getCount=SELECT COUNT(*)  FROM corporate
#############################################################################
############################## Customer service entity ######################
#############################################################################
query.customer_service.save=INSERT INTO customer_service(customer_id, service_id, price, service_status) VALUES (?, ?, ?, ?) RETURNING id;
query.customer_service.update=UPDATE customer_service SET customer_id = ?, service_id = ?,  price = ?, service_status = ? WHERE id = ?;
query.customer_service.getById=SELECT id, customer_id, service_id, price, service_status FROM customer_service WHERE id = ?;
query.customer_service.getAll=SELECT id, customer_id, service_id, price, service_status FROM customer_service;
query.customer_service.getByServiceAndCustomerId=\
  SELECT COUNT(1) \
  FROM customer_service \
  WHERE service_id = ? AND customer_id = ?;
query.customer_service.getByCustomerId=\
  SELECT id, customer_id, service_id, price, service_status \
  FROM customer_service \
  WHERE customer_id = ?;
query.customer_service.getActiveOrSuspendedByCustomerId=\
  SELECT id, customer_id, service_id, price, service_status \
  FROM customer_service \
  WHERE customer_id = ? and service_status IN ('ACTIVE', 'SUSPENDED');
#############################################################################
############################## Customer tariff entity ######################
#############################################################################
query.customer_tariff.save=INSERT INTO customer_tariff(customer_id, corporate_id, total_price, tariff_status,tariff_id) VALUES (?, ?, ?, ?, ?) RETURNING id;
query.customer_tariff.update=UPDATE customer_tariff SET customer_id = ?, corporate_id = ?, total_price = ?, tariff_status = ?, tariff_id=? WHERE id = ?;
query.customer_tariff.getById=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE id = ?;
query.customer_tariff.getAll=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff;
query.customer_tariff.getByCustomerId=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE customer_id = ? and tariff_status='ACTIVE';
query.customer_tariff.getByCorporateId=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE corporate_id = ? and tariff_status='ACTIVE';
query.customer_tariff.getActiveOrSuspendedByCustomerId=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE customer_id = ? and tariff_status IN ('ACTIVE', 'SUSPENDED');
query.customer_tariff.getActiveOrSuspendedByCorporateId=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE corporate_id = ? and tariff_status IN ('ACTIVE', 'SUSPENDED');
query.customer_tariff.getTariffsByCustomerId=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE customer_id = ?;
query.customer_tariff.getTariffsByCorporateId=SELECT id, customer_id, corporate_id, total_price, tariff_status,tariff_id FROM customer_tariff WHERE corporate_id = ?;
#############################################################################
############################## User entity ##################################
#############################################################################
query.user.save=\
  INSERT INTO dbuser(email, password, role_id, status) \
  VALUES (?, ?, ?, ?) RETURNING id;
query.user.getById=\
  SELECT id, email, password, role_id, status \
  FROM dbuser WHERE id = ?;
query.user.update=\
  UPDATE dbuser \
  SET email = ?, password = ?, role_id = ?, status = ? \
  WHERE id = ?;
query.user.getByEmail=\
  SELECT id, email, password, role_id, status \
  FROM dbuser \
  WHERE email = ?
query.user.getAll=\
  SELECT dbuser.id, email, password, role_id, status \
  FROM dbuser \
  WHERE role_id <> 4 AND role_id <> 1
query.user.getCount=\
  SELECT COUNT(*) \
  FROM dbuser \
  WHERE role_id <> 4 AND role_id <> 1
query.user.updateUserStatus=\
  UPDATE dbuser \
  SET status = ? \
  WHERE id = ?;
query.user.count.by.email=\
  SELECT COUNT(1) \
  FROM dbuser \
  WHERE email = ?
#############################################################################
############################ Customer entity ################################
#############################################################################
query.customer.save=\
  INSERT INTO dbuser(email, password, role_id, firstname, secondname, lastname, \
  phone, address_id, corporate_id, is_representative, status, is_mailing_enabled) \
  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id;
query.customer.getById=\
  SELECT id, email, password, role_id, firstname, secondname, lastname, phone, \
  address_id, corporate_id, is_representative, status, is_mailing_enabled \
  FROM dbuser WHERE id = ?;
query.customer.by.verification.token=\
  SELECT u.id, email, password, role_id, firstname, secondname, lastname, \
  phone, address_id, corporate_id, is_representative, status, is_mailing_enabled \
  FROM dbuser u INNER JOIN verification_token vt \
  ON u.id = vt.user_id \
  WHERE token = ?
query.customer.update=\
  UPDATE dbuser \
  SET email = ?, password = ?, role_id = ?, firstname = ?, secondname = ?, lastname = ?, phone = ?, \
  address_id = ?, corporate_id = ?, is_representative = ?, status = ?, is_mailing_enabled = ? \
  WHERE id = ?;
query.customer.getByEmail=\
  SELECT id, email, password, role_id, firstname, secondname, lastname, phone, address_id, corporate_id, \
  is_representative, status, is_mailing_enabled \
  FROM dbuser \
  WHERE email = ?
query.customer.getAll=\
  SELECT dbuser.id, email, password, role_id, firstname, secondname, lastname, phone, address_id, corporate_id, \
  is_representative, status, is_mailing_enabled \
  FROM dbuser INNER JOIN address ON dbuser.address_id = address.id \
  WHERE role_id = 4
query.customer.getCount=\
  SELECT COUNT(*) FROM dbuser \
  INNER JOIN address \
  ON dbuser.address_id = address.id
query.customer.by.corporate=SELECT id, email, password, role_id, firstname, secondname, lastname, phone, address_id, corporate_id, \
  is_representative, status, is_mailing_enabled \
  FROM dbuser \
  WHERE corporate_id = ?
query.customer.without.corporate=SELECT id, email, password, role_id, firstname, secondname, lastname, phone, address_id, corporate_id, is_representative, status, is_mailing_enabled FROM dbuser WHERE corporate_id is NULL AND role_id=4
query.customer.updateUserStatus=\
  UPDATE dbuser \
  SET status = ? \
  WHERE id = ?;
query.customer.count.by.email=\
  SELECT COUNT(1) \
  FROM dbuser \
  WHERE email = ?
query.customer.count.by.phone=\
  SELECT COUNT(1) \
  FROM dbuser \
  WHERE phone = ?
#############################################################################
############################## Product category entity ######################
#############################################################################
query.product_category.save=INSERT INTO product_category(category_name, units) VALUES (?, ?) RETURNING id;
query.product_category.update=UPDATE product_category SET category_name = ?, units = ? WHERE id = ?;
query.product_category.getById=SELECT id, category_name, units FROM product_category WHERE id = ?;
query.product_category.getAll=SELECT id, category_name, units FROM product_category;
query.product_category.getByName=SELECT id, category_name, units FROM product_category WHERE category_name = ?;
#############################################################################
############################## Region entity ################################
#############################################################################
query.region.save=INSERT INTO region(name_region) VALUES (?) RETURNING id;
query.region.update=UPDATE region SET name_region = ? WHERE id = ?;
query.region.getById=SELECT id, name_region FROM region WHERE id = ?;
query.region.getAll=SELECT id, name_region FROM region;
#############################################################################
############################## Role entity ##################################
#############################################################################
query.role.save=INSERT INTO role(name) VALUES (?) RETURNING id;
query.role.update=UPDATE role SET name = ? WHERE id = ?;
query.role.getById=SELECT id, name FROM role WHERE id = ?;
query.role.getAll=SELECT id, name FROM role;
#############################################################################
############################## Service  entity ##############################
#############################################################################
query.service.save=\
  INSERT INTO service(prod_category_id, service_name, price, product_status, \
  discount, picture_url, preview_description, description, duration_in_days, \
  amount) \
  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id;
query.service.update=\
  UPDATE service \
  SET prod_category_id = ?, service_name = ?, price = ?, product_status = ?, \
  discount = ?, picture_url = ?, preview_description = ?, description = ?, \
  duration_in_days = ?, amount = ? \
  WHERE id = ?;
query.service.getById=\
  SELECT id, prod_category_id, service_name, price, product_status, discount, \
  picture_url, description, preview_description, duration_in_days, amount \
  FROM service \
  WHERE id = ?;
query.service.getAll=\
  SELECT s.id, s.prod_category_id, s.service_name, s.price, s.product_status, \
  s.discount, s.picture_url, description, preview_description, duration_in_days,\
  amount \
  FROM service AS s
query.service.getCount=\
  SELECT count(*) \
  FROM service AS s
query.service.checkIfExists=\
  SELECT count(1) \
  FROM service \
  WHERE service_name = ?
query.service.updateStatus=\
  UPDATE service \
  SET product_status = ? \
  WHERE id = ?
#############################################################################
############################## Tariff  entity ###############################
#############################################################################
query.tariff.save=INSERT INTO tariff(tariff_name, product_status, internet, calls_in_network, calls_on_other_numbers, sms, mms, roaming, is_corporate, creation_date, discount, picture_url, price) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id;
query.tariff.update=UPDATE tariff SET tariff_name = ?, product_status = ?, internet = ?, calls_in_network = ?, calls_on_other_numbers = ?, sms = ?, mms =?, roaming = ?, is_corporate = ?, creation_date = ?, discount = ?, picture_url = ?, price = ? WHERE id = ?;
query.tariff.getById=SELECT id, tariff_name, product_status, internet, calls_in_network, calls_on_other_numbers, sms, mms, roaming, is_corporate, creation_date, discount, picture_url, price FROM tariff WHERE id = ?;
query.tariff.getAll=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, t.price FROM tariff as t
query.tariff.getAllWithRegionPrice=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, tr.price as price FROM tariff as t inner join tariff_region as tr on t.id = tr.tariff_id where tr.region_id = ? and t.product_status='ACTIVATED' and t.is_corporate = false ORDER BY t.creation_date DESC LIMIT ? OFFSET ?
query.tariff.getAllActivatedWithRegionPrice=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, tr.price as price FROM tariff as t inner join tariff_region as tr on t.id = tr.tariff_id where tr.region_id = ? and t.product_status='ACTIVATED' and t.is_corporate = false ORDER BY t.creation_date DESC
query.tariff.getCountWithRegionPrice=SELECT count(*) FROM tariff as t inner join tariff_region as tr on t.id = tr.tariff_id where tr.region_id = ? and t.product_status='ACTIVATED' and t.is_corporate = false
query.tariff.getAllAvailable=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, t.price FROM tariff as t inner join tariff_region as tr on t.id = tr.tariff_id where tr.region_id = ?;
query.tariff.getCount=SELECT count(*) FROM tariff as t
query.tariff.updateStatus=UPDATE tariff SET product_status = ? WHERE id = ?
query.tariff.findByTariffName=SELECT id, tariff_name, product_status, internet, calls_in_network, calls_on_other_numbers, sms, mms, roaming, is_corporate, creation_date, discount, picture_url, price FROM tariff WHERE tariff_name = ?;
query.tariff.getByIdForSingleCustomer=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, tr.price as price FROM tariff as t inner join tariff_region as tr on t.id = tr.tariff_id where t.id = ? and tr.region_id = ?
query.tariff.getTariffsAvailableForCorporate=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, t.price FROM tariff as t where t.product_status='ACTIVATED' and t.is_corporate = true ORDER BY t.creation_date DESC LIMIT ? OFFSET ?
query.tariff.getAllTariffsAvailableForCorporate=SELECT t.id, t.tariff_name, t.product_status, t.internet, t.calls_in_network, t.calls_on_other_numbers, t.sms, t.mms, t.roaming, t.is_corporate, t.creation_date, t.discount, t.picture_url, t.price FROM tariff as t where t.product_status='ACTIVATED' and t.is_corporate = true ORDER BY t.creation_date DESC
query.tariff.getCountAvailableForCorporate=SELECT count(*) FROM tariff as t where t.product_status='ACTIVATED' and t.is_corporate = true '
#############################################################################
####################### Tariff region entity ################################
#############################################################################
query.tariff_region.save=\
  INSERT INTO tariff_region(region_id, tariff_id, price) \
  VALUES (?, ?, ?) RETURNING id;
query.tariff_region.update=UPDATE tariff_region SET region_id = ?, tariff_id = ?, price = ? WHERE id = ?;
query.tariff_region.getById=SELECT id, region_id, tariff_id, price FROM tariff_region WHERE id = ?;
query.tariff_region.getAll=SELECT id, region_id, tariff_id, price FROM tariff_region
query.tariff_region.getCount=SELECT count(*) FROM tariff_region
query.tariff_region.getAllByTariffId=SELECT tr.id tr_id, tr.region_id, tr.tariff_id, tr.price, r.name_region FROM tariff_region as tr inner join region as r on tr.region_id = r.id WHERE tr.tariff_id = ?
query.tariff_region.getAllByTariffIdAndRegionId=SELECT tr.id, tr.region_id, tr.tariff_id, tr.price FROM tariff_region as tr WHERE tr.tariff_id = ? and tr.region_id = ?
query.tariff_region.deleteByTariffId=DELETE FROM tariff_region WHERE tariff_id = ?
#############################################################################
####################### Verification token entity ###########################
#############################################################################
query.verification_token.save=\
  INSERT INTO verification_token(user_id, token, expiry_date) \
  VALUES (?, ?, ?) RETURNING id;
query.verification_token.update=UPDATE verification_token SET user_id = ?, token = ?, expiry_date = ? WHERE id = ?;
query.verification_token.getById=SELECT id, user_id, token, expiry_date FROM verification_token WHERE id = ?;
query.verification_token.getAll=SELECT id, user_id, token, expiry_date FROM verification_token;
#############################################################################
############################# Order entity ##################################
#############################################################################
query.order.save=\
  INSERT INTO public.order(customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date) \
  VALUES (?, ?, ?, ?, ? , ?) RETURNING id;
query.order.update=\
  UPDATE public.order \
  SET customer_service_id = ?, customer_tariff_id = ?, type = ?, order_status = ?, creation_date = ?, execution_date = ?\
  WHERE id = ?;
query.order.getById=\
  SELECT id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date\
  FROM public.order\
  WHERE id = ?;
query.order.getAll=SELECT id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date \
  FROM public.order;
query.order.getResumingByCustomerId=\
  SELECT id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date \
  FROM public.order \
  WHERE customer_tariff_id = ? and type = 'RESUMING' and order_status = 'CREATED';
query.order.getResumingServicesByCustomerId=\
  SELECT id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date \
  FROM public.order \
  WHERE customer_service_id = ? and type = 'RESUMING';
query.order.getPagedForCustomerServicesByCustomerId=\
  SELECT o.id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date \
  FROM public.order AS o INNER JOIN public.customer_service as cs \
  ON o.customer_service_id = cs.id \
  WHERE cs.customer_id = ? \
  ORDER BY creation_date DESC LIMIT ? OFFSET ?;
query.order.getPagedByCustomerId=\
  SELECT o.id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date \
  FROM public.order as o INNER JOIN public.customer_tariff as ct ON o.customer_tariff_id = ct.id \
  WHERE ct.customer_id = ? ORDER BY creation_date DESC, o.id DESC LIMIT ? OFFSET ?;
query.order.getPagedByCorporateId=\
  SELECT o.id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date \
  FROM public.order as o INNER JOIN public.customer_tariff as ct ON o.customer_tariff_id = ct.id \
  WHERE ct.corporate_id = ? ORDER BY creation_date DESC, o.id DESC LIMIT ? OFFSET ?;
query.order.getCountByCustomerId=\
  SELECT count(*) \
  FROM public.order as o INNER JOIN public.customer_tariff as ct ON o.customer_tariff_id = ct.id \
  WHERE ct.customer_id = ?;
query.order.getCountByCorporateId=\
  SELECT count(*) \
  FROM public.order as o INNER JOIN public.customer_tariff as ct ON o.customer_tariff_id = ct.id \
  WHERE ct.corporate_id = ?;
query.order.getCountOfServicesByCustomerId=\
  SELECT count(*) \
  FROM public.order as o INNER JOIN public.customer_service as cs \
  ON o.customer_service_id = cs.id \
  WHERE cs.customer_id = ?;
query.order.tariff.by.region.id=\
  SELECT id, customer_service_id, customer_tariff_id, type, order_status, \
  creation_date, execution_date \
  FROM "order" \
  WHERE customer_tariff_id IN (\
        SELECT DISTINCT ct.id \
        FROM customer_tariff ct \
            INNER JOIN tariff_region tr \
            ON tr.tariff_id = ct.tariff_id \
                WHERE region_id = ?);
query.order.services=\
  SELECT id, customer_service_id, customer_tariff_id, type, order_status, \
  creation_date, execution_date \
  FROM "order" \
  WHERE customer_service_id IS NOT NULL;
query.order.service.by.time.period=\
  SELECT id, customer_service_id, customer_tariff_id, type, order_status, \
  creation_date, execution_date \
  FROM "order" \
  WHERE customer_service_id IS NOT NULL \
  AND creation_date BETWEEN ? AND ?;
query.order.for.the.last.month.by.type=\
  SELECT count(*) AS "No. of orders" \
  FROM "order" \
  WHERE creation_date > now() - interval '1 month' \
  AND type = ? \
  GROUP BY date_trunc('week', creation_date) \
  ORDER BY date_trunc('week', creation_date);
query.order.tariffs.statistics.by.region.and.time.period=\
  SELECT COUNT("order".id) AS order_count, tariff_name, "order".creation_date, type \
  FROM "order" \
  INNER JOIN customer_tariff \
  ON "order".customer_tariff_id = customer_tariff.id \
  INNER JOIN tariff ON customer_tariff.tariff_id = tariff.id \
  INNER JOIN tariff_region ON tariff.id = tariff_region.tariff_id \
  WHERE (type = 'ACTIVATION' OR type = 'DEACTIVATION') AND region_id = ? AND "order".creation_date BETWEEN ? AND ? \
  GROUP BY tariff_name, "order".creation_date, type;
query.order.services.statistics.by.time.period=\
  { call get_services_statistics(?, ?) }
query.order.nextResumingOrder=SELECT id, customer_service_id, customer_tariff_id, type, order_status, creation_date, execution_date FROM "order" AS o WHERE o.type = 'RESUMING' and order_status = 'CREATED' order by execution_date LIMIT 1
#############################################################################
####################### MarketingCampaign entity ###########################
#############################################################################
query.marketing_campaign.save=\
  INSERT INTO public.marketing_campaign(name, marketing_campaign_status, description, marketing_campaign_tariff_id) \
  VALUES (?, ?, ?, ?) RETURNING id;
query.marketing_campaign.update=\
  UPDATE public.marketing_campaign \
  SET name = ?, marketing_campaign_status = ?, description = ?, marketing_campaign_tariff_id = ? \
  WHERE id = ?;
query.marketing_campaign.getById=\
  SELECT id, name, marketing_campaign_status, description, marketing_campaign_tariff_id \
  FROM public.marketing_campaign \
  WHERE id = ?;
query.marketing_campaign.getAll=SELECT id, name, marketing_campaign_status, description, marketing_campaign_tariff_id \
  FROM public.marketing_campaign;
query.marketing_campaign.getAllByMarketingTariff=SELECT mc.id, name, marketing_campaign_status, \
  description, marketing_campaign_tariff_id \
  FROM public.marketing_campaign AS mc \
  INNER JOIN public.marketing_campaign_tariff AS mct \
  ON mc.marketing_campaign_tariff_id = mct.id WHERE mct.id = ?;
#############################################################################
####################### MarketingCampaignServices entity ###########################
#############################################################################
query.marketing_campaign_services.save=\
  INSERT INTO public.marketing_campaign_services(marketing_campaign_id, service_id, price) \
  VALUES (?, ?, ?) RETURNING id;
query.marketing_campaign_services.update=\
  UPDATE public.marketing_campaign_services \
  SET marketing_campaign_id = ?, service_id = ?, price = ? \
  WHERE id = ?;
query.marketing_campaign_services.getById=\
  SELECT id, marketing_campaign_id, service_id, price \
  FROM public.marketing_campaign_services \
  WHERE id = ?;
query.marketing_campaign_services.getAll=SELECT id, marketing_campaign_id, service_id, price \
  FROM public.marketing_campaign_services;
query.marketing_campaign_services.getByMarketingCampaignId=SELECT mcs.id, mcs.service_id, price \
  FROM public.marketing_campaign_services AS mcs \
  INNER JOIN public.marketing_campaign_and_services as mcas \
  ON mcs.id = mcas.marketing_campaign_services_id WHERE mcas.marketing_campaign_id = ?;
#############################################################################
####################### MarketingCampaignTariff entity ###########################
#############################################################################
query.marketing_campaign_tariff.save=\
  INSERT INTO public.marketing_campaign_tariff(tariff_region_id) \
  VALUES (?) RETURNING id;
query.marketing_campaign_tariff.update=\
  UPDATE public.marketing_campaign_tariff \
  SET tariff_region_id = ?\
  WHERE id = ?;
query.marketing_campaign_tariff.getById=\
  SELECT id, tariff_region_id \
  FROM public.marketing_campaign_tariff \
  WHERE id = ?;
query.marketing_campaign_tariff.getAll=SELECT id, tariff_region_id \
  FROM public.marketing_campaign_tariff;
query.marketing_campaign_tariff.getAllAvailableForCustomer=SELECT mct.id, tariff_region_id \
  FROM public.marketing_campaign_tariff AS mct \
  INNER JOIN public.tariff_region as tr ON mct.tariff_region_id = tr.id \
  INNER JOIN public.tariff as t ON tr.tariff_id = t.id WHERE tr.region_id = ? \
  and t.product_status='ACTIVATED' and t.is_corporate = false ORDER BY t.creation_date DESC;

